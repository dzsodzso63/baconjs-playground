// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.Meeting = (function() {

    function Meeting(model, baseCanvas, targetCanvas) {
      this.model = model;
      this.baseCanvas = baseCanvas;
      this.targetCanvas = targetCanvas;
      this.updateObject = __bind(this.updateObject, this);

      this.deleteTargetObject = __bind(this.deleteTargetObject, this);

      this.createTargetObject = __bind(this.createTargetObject, this);

      this.onChange = __bind(this.onChange, this);

      this.baseCanvasFilter = __bind(this.baseCanvasFilter, this);

      this.notifyChangeStream = this.model.notifyChangeStream.filter(this.baseCanvasFilter);
      this.notifyChangeStream.onValue(this.onChange);
    }

    Meeting.prototype.baseCanvasFilter = function(change) {
      return change.canvas === this.baseCanvas;
    };

    Meeting.prototype.onChange = function(change) {
      var obj, origObj, targetDomId, targetObj;
      obj = change.object;
      targetDomId = this.model.domId(obj.id, this.targetCanvas);
      targetObj = this.model.objectByDomId[targetDomId];
      origObj = this.model.objectByDomId[obj.domId];
      if (targetObj != null) {
        if (origObj != null) {
          return this.updateObject(obj, targetObj);
        } else {
          return this.deleteTargetObject(targetObj);
        }
      } else {
        return this.createTargetObject(obj);
      }
    };

    Meeting.prototype.createTargetObject = function(obj) {
      var targetObj;
      return targetObj = new this.model(this.targetCanvas, obj.id, obj.left, obj.top, obj.width, obj.height, obj.colorCode, obj.deg);
    };

    Meeting.prototype.deleteTargetObject = function(obj) {
      return obj.deleteStream.push();
    };

    Meeting.prototype.updateObject = function(obj, targetObj) {
      targetObj.size({
        width: obj.width,
        height: obj.height
      });
      targetObj.position({
        left: obj.left,
        top: obj.top
      });
      targetObj.rotation({
        deg: obj.deg
      });
      return targetObj.color(obj.colorCode);
    };

    return Meeting;

  })();

}).call(this);
