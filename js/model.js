// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.Obj = (function() {

    Obj.prefix = "object_";

    Obj.objectByDomId = {};

    Obj.loadAll = function() {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = Obj.objectCount(); 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.loadObject(i));
      }
      return _results;
    };

    Obj.objectCount = function() {
      return localStorage.getItem("object_count") || 0;
    };

    Obj.storeKey = function(id) {
      return "object_" + id;
    };

    Obj.loadObject = function(id) {
      var jsonData, o, obj;
      jsonData = localStorage.getItem(Obj.storeKey(id));
      if (jsonData) {
        o = JSON.parse(jsonData);
        return obj = new Obj(o.canvas, id, o.left, o.top, o.width, o.height, o.colorCode, o.deg);
      }
    };

    function Obj(canvas, id, left, top, width, height, colorCode, deg) {
      this.canvas = canvas;
      this.id = id;
      this.left = left;
      this.top = top;
      this.width = width;
      this.height = height;
      this.colorCode = colorCode;
      this.deg = deg;
      this.persist = __bind(this.persist, this);

      this.toJSON = __bind(this.toJSON, this);

      this.position = __bind(this.position, this);

      if (!this.id) {
        this.id = parseInt(Obj.objectCount(), 10) + 1;
      }
      this.domId = 'b_' + this.canvas + '_' + Obj.prefix + this.id;
      this.createObject();
      this.size(this.width, this.height);
      this.position({
        left: this.left,
        top: this.top
      });
      this.rotation(this.deg || 0);
      this.color(this.colorCode);
      Obj.objectByDomId[this.domId] = this;
      this.persistStream = new Bacon.Bus();
      this.persistStream.onValue(this.persist);
      this.persistStream.push();
      this.moveStream = new Bacon.Bus();
      this.moveStream.onValue(this.position);
    }

    Obj.prototype.wrapperSize = function() {
      return Math.round(Math.sqrt(Math.pow(this.width, 2) + Math.pow(this.height, 2)));
    };

    Obj.prototype.rePositionInWrapper = function() {
      return this.positionInWrapper((this.wrapperSize() - this.height) / 2, (this.wrapperSize() - this.width) / 2);
    };

    Obj.prototype.domObject = function() {
      return $("#" + this.domId);
    };

    Obj.prototype.createObject = function() {
      return $("#" + this.canvas).prepend('<div id="' + this.domId + '_wrapper" class="wrapper" style="">' + '<div id="' + this.domId + '" class="display_area transformable" style="' + '"><span>' + Obj.prefix + (this.id + 1) + '</span></div></div>');
    };

    Obj.prototype.color = function(colorCode) {
      if (colorCode != null) {
        this.colorCode = colorCode;
        this.domObject().css('background-color', this.colorCode);
      }
      return this.colorCode;
    };

    Obj.prototype.size = function(to_width, to_height) {
      if ((to_width != null) && (to_height != null)) {
        this.position({
          left: this.left - ((to_width - this.width) / 2),
          top: this.top - ((to_height - this.height) / 2)
        });
        this.width = to_width;
        this.height = to_height;
        this.domObject().css('width', Math.round(this.width)).css('height', Math.round(this.height)).css('line-height', Math.round(this.height) + 'px');
        this.domObject().parent().css('width', this.wrapperSize()).css('height', this.wrapperSize());
      }
      return {
        width: this.width,
        height: this.height
      };
    };

    Obj.prototype.position = function(to) {
      if ((to != null) && (to.left != null) && (to.top != null)) {
        this.left = to.left;
        this.top = to.top;
        this.domObject().parent().css('left', Math.round(this.left - (this.wrapperSize() - this.width) / 2)).css('top', Math.round(this.top - (this.wrapperSize() - this.height) / 2));
        this.rePositionInWrapper();
      }
      return {
        left: this.left,
        top: this.top
      };
    };

    Obj.prototype.positionInWrapper = function(x, y) {
      return this.domObject().css('top', Math.round(x)).css('left', Math.round(y));
    };

    Obj.prototype.rotation = function(degree) {
      if (degree != null) {
        this.deg = degree;
        this.domObject().css({
          '-webkit-transform': 'rotate(' + degree + 'deg)',
          '-moz-transform': 'rotate(' + degree + 'deg)',
          '-ms-transform': 'rotate(' + degree + 'deg)',
          '-o-transform': 'rotate(' + degree + 'deg)',
          'transform': 'rotate(' + degree + 'deg)'
        });
      }
      return this.deg;
    };

    Obj.prototype.toJSON = function() {
      return {
        canvas: this.canvas,
        id: this.id,
        left: this.left,
        top: this.top,
        width: this.width,
        height: this.height,
        colorCode: this.colorCode,
        deg: this.deg
      };
    };

    Obj.prototype.storeKey = function() {
      return Obj.storeKey(this.id);
    };

    Obj.prototype.persist = function() {
      var jsonData;
      jsonData = JSON.stringify(this);
      localStorage.setItem(this.storeKey(), jsonData);
      if (this.id > Obj.objectCount()) {
        return localStorage.setItem("object_count", this.id);
      }
    };

    Obj.prototype["delete"] = function() {
      this.domObject().parent().fadeOut(300, function() {
        return $(this).remove();
      });
      return localStorage.removeItem(this.storeKey());
    };

    return Obj;

  })();

}).call(this);
