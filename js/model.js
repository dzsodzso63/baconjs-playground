// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Obj = (function(_super) {

    __extends(Obj, _super);

    Obj.prefix = "object_";

    Obj.objectByDomId = {};

    Obj.Transform = {
      move: "move",
      scale: "scale",
      rotate: "rotate"
    };

    Obj.loadAll = function() {
      var i, _i, _ref;
      for (i = _i = 0, _ref = Obj.objectCount(); 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.loadObject(i);
      }
      return FlashMessage.message("Objects loaded.");
    };

    Obj.objectCount = function() {
      return localStorage.getItem("object_count") || 0;
    };

    Obj.storeKey = function(id) {
      return "object_" + id;
    };

    Obj.loadObject = function(id) {
      var jsonData, o, obj;
      jsonData = localStorage.getItem(Obj.storeKey(id));
      if (jsonData) {
        o = JSON.parse(jsonData);
        return obj = new Obj(o.canvas, id, o.left, o.top, o.width, o.height, o.colorCode, o.deg);
      }
    };

    Obj.transformStream = function(trans) {
      if (trans != null) {
        Obj.globalTransformStream = trans;
      }
      return Obj.globalTransformStream;
    };

    Obj.selectedObject = new Bacon.Bus();

    function Obj(canvas, id, left, top, width, height, colorCode, deg) {
      var isNew;
      this.canvas = canvas;
      this.id = id;
      this.left = left;
      this.top = top;
      this.width = width;
      this.height = height;
      this.colorCode = colorCode;
      this.deg = deg;
      this.deleteThis = __bind(this.deleteThis, this);

      this.persist = __bind(this.persist, this);

      this.toJSON = __bind(this.toJSON, this);

      this.rotation = __bind(this.rotation, this);

      this.position = __bind(this.position, this);

      this.size = __bind(this.size, this);

      this.transformStream = __bind(this.transformStream, this);

      this.createStreams = __bind(this.createStreams, this);

      isNew = false;
      if (!this.id) {
        this.id = parseInt(Obj.objectCount(), 10) + 1;
        isNew = true;
      }
      this.domId = 'b_' + this.canvas + '_' + Obj.prefix + this.id;
      this.createObject();
      this.size({
        width: this.width,
        height: this.height
      });
      this.position({
        left: this.left,
        top: this.top
      });
      this.rotation({
        deg: this.deg || 0
      });
      this.color(this.colorCode);
      this.createStreams();
      if (isNew) {
        this.persistStream.push();
      }
      Obj.objectByDomId[this.domId] = this;
    }

    Obj.prototype.createStreams = function() {
      var _this = this;
      this.persistStream = new Bacon.Bus();
      this.persistStream.onValue(this.persist);
      this.selectionFilter = Obj.selectedObject.map(function(obj) {
        return (obj != null ? obj.id : void 0) === _this.id;
      }).toProperty();
      this.transformStream(Obj.globalTransformStream.filter(this.selectionFilter));
      this.deleteStream = new Bacon.Bus();
      return this.deleteStream.onValue(this.deleteThis);
    };

    Obj.prototype.transformStream = function(stream) {
      if (stream != null) {
        this._transformStream = stream;
        this.moveStream = this._transformStream.filter(function(trans) {
          return trans.type === Obj.Transform.move;
        });
        this.scaleStream = this._transformStream.filter(function(trans) {
          return trans.type === Obj.Transform.scale;
        });
        this.rotateStream = this._transformStream.filter(function(trans) {
          return trans.type === Obj.Transform.rotate;
        });
        this.moveStream.onValue(this.position);
        this.scaleStream.onValue(this.size);
        this.rotateStream.onValue(this.rotation);
      }
      return this._transformStream;
    };

    Obj.prototype.wrapperSize = function() {
      return Math.round(Math.sqrt(Math.pow(this.width, 2) + Math.pow(this.height, 2)));
    };

    Obj.prototype.rePositionInWrapper = function() {
      return this.moveObject((this.wrapperSize() - this.width) / 2, (this.wrapperSize() - this.height) / 2);
    };

    Obj.prototype.createObject = function() {
      return $("#" + this.canvas).prepend('<div id="' + this.domId + '_wrapper" class="wrapper" style="">' + '<div id="' + this.domId + '" class="display_area transformable" style="' + '"><span>' + Obj.prefix + (this.id + 1) + '</span></div></div>');
    };

    Obj.prototype.color = function(colorCode) {
      if (colorCode != null) {
        this.colorCode = colorCode;
        this.domObject().css('background-color', this.colorCode);
      }
      return this.colorCode;
    };

    Obj.prototype.size = function(to) {
      var scale, to_height, to_width;
      if (to != null) {
        if ((to.width != null) && (to.height != null)) {
          this.position({
            left: this.left - ((to.width - this.width) / 2),
            top: this.top - ((to.height - this.height) / 2)
          });
          this.width = to.width;
          this.height = to.height;
        } else {
          scale = Math.pow(3, (to.cursorPosition.x - to.startState.startMousePos.x) / 1000);
          to_width = to.startState.startObjectSize.width * scale;
          to_height = to.startState.startObjectSize.height * scale;
          this.position({
            left: this.left - ((to_width - this.width) / 2),
            top: this.top - ((to_height - this.height) / 2)
          });
          this.width = to_width;
          this.height = to_height;
        }
        this.domObject().css('width', Math.round(this.width)).css('height', Math.round(this.height)).css('line-height', Math.round(this.height) + 'px');
        this.domObject().parent().css('width', this.wrapperSize()).css('height', this.wrapperSize());
      }
      return {
        width: this.width,
        height: this.height
      };
    };

    Obj.prototype.position = function(to) {
      if (to != null) {
        if ((to.left != null) && (to.top != null)) {
          this.left = to.left;
          this.top = to.top;
        } else {
          this.left = to.startState.startObjectPos.left + (to.cursorPosition.x - to.startState.startMousePos.x);
          this.top = to.startState.startObjectPos.top + (to.cursorPosition.y - to.startState.startMousePos.y);
        }
        this.domObject().parent().css('left', Math.round(this.left - (this.wrapperSize() - this.width) / 2)).css('top', Math.round(this.top - (this.wrapperSize() - this.height) / 2));
        this.rePositionInWrapper();
      }
      return {
        left: this.left,
        top: this.top
      };
    };

    Obj.prototype.rotation = function(to) {
      var radAngle;
      if (to != null) {
        if (to.deg != null) {
          this.deg = to.deg;
        } else {
          radAngle = Math.atan2(to.cursorPosition.y - to.startState.startMousePos.y, to.cursorPosition.x - to.startState.startMousePos.x);
          this.deg = radAngle * 180.0 / Math.PI;
        }
        this.domObject().css({
          '-webkit-transform': 'rotate(' + this.deg + 'deg)',
          '-moz-transform': 'rotate(' + this.deg + 'deg)',
          '-ms-transform': 'rotate(' + this.deg + 'deg)',
          '-o-transform': 'rotate(' + this.deg + 'deg)',
          'transform': 'rotate(' + this.deg + 'deg)'
        });
      }
      return this.deg;
    };

    Obj.prototype.toJSON = function() {
      return {
        canvas: this.canvas,
        id: this.id,
        left: this.left,
        top: this.top,
        width: this.width,
        height: this.height,
        colorCode: this.colorCode,
        deg: this.deg
      };
    };

    Obj.prototype.storeKey = function() {
      return Obj.storeKey(this.id);
    };

    Obj.prototype.persist = function() {
      var jsonData;
      jsonData = JSON.stringify(this);
      localStorage.setItem(this.storeKey(), jsonData);
      if (this.id > Obj.objectCount()) {
        localStorage.setItem("object_count", this.id);
      }
      return FlashMessage.message("Saved.");
    };

    Obj.prototype.deleteThis = function() {
      this.domObject().parent().fadeOut(300, function() {
        return $(this).remove();
      });
      localStorage.removeItem(this.storeKey());
      return FlashMessage.message("Object deleted.");
    };

    return Obj;

  }).call(this, DisplayObject);

}).call(this);
